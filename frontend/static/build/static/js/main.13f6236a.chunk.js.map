{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","chat","name","title","email","fetch","then","response","json","data","setState","e","preventDefault","method","headers","body","JSON","stringify","text","console","log","this","id","chats","map","x","onClick","handleEdit","handleDelete","className","action","onSubmit","handleSubmit","htmlFor","type","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAyFeA,E,kDApFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,CAAC,CACHC,KAAM,GACNC,MAAO,GACPC,MAAO,MANA,E,qDAWnB,WAAqB,IAAD,OAChBC,MAAM,gBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACT,KAAK,YAAKQ,U,0BAG/C,SAAaE,GACTA,EAAEC,iBACFP,MAAM,gBAAiB,CACnBQ,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBf,KAAM,UACNC,MAAO,kBACPe,KAAM,sBAGdC,QAAQC,IAAIC,KAAKrB,S,wBAGrB,SAAWW,EAAGW,GACVjB,MAAM,WAAaiB,EAAI,CACnBT,OAAQ,MACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBf,KAAM,UACNC,MAAO,kBACPe,KAAM,wB,0BAKlB,SAAaI,GACTjB,MAAM,IAAMiB,EAAI,CACZT,OAAQ,a,oBAIhB,WAAU,IAAD,SACCU,EAAK,UAAGF,KAAKrB,MAAMC,YAAd,aAAG,EAAiBuB,KAAI,SAAAC,GAAC,OAAK,+BACrB,4BAAIA,EAAEvB,OACN,6BAAKuB,EAAEtB,QACP,4BAAIsB,EAAEP,OACN,wBAAQQ,QAAS,EAAKC,WAAtB,kBACA,wBAAQD,QAAS,EAAKE,aAAtB,0BAEpB,OAAQ,mCACJ,sBAAKC,UAAU,MAAf,UACI,0CACA,uBAAMC,OAAO,GAAGC,SAAU,SAACpB,GAAD,OAAO,EAAKqB,aAAarB,IAAnD,UACI,uBAAOsB,QAAQ,OAAf,kBACA,uBAAOC,KAAK,OAAOhC,KAAK,OAAOoB,GAAG,SAClC,uBAAOW,QAAQ,QAAf,mBACA,uBAAOC,KAAK,OAAOhC,KAAK,UACxB,uBAAO+B,QAAQ,OAAf,kCACA,uBAAOC,KAAK,OAAOhC,KAAK,OAAOoB,GAAG,SAClC,wBAAQY,KAAK,SAAb,sBAGJ,qBAAKL,UAAU,eAAf,SACI,6BACKN,e,GA7EPY,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.13f6236a.chunk.js","sourcesContent":["import './App.css';\nimport {Component} from \"react\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chat: [{\n                name: \"\",\n                title: \"\",\n                email: \"\"\n            }]\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"/api/v1/chat\")\n            .then(response => response.json())\n            .then(data => this.setState({chat: [...data]}));\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        fetch(\"/api/v1/chat/\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"Application-Json\"\n            },\n            body: JSON.stringify({\n                name: \"Patrick\",\n                title: \"My super title!\",\n                text: \"My fun episode!\"\n            })\n        });\n        console.log(this.state)\n    }\n\n    handleEdit(e, id) {\n        fetch(\"/api/v1/\" + id, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"Application-Json\"\n            },\n            body: JSON.stringify({\n                name: \"Patrick\",\n                title: \"My super title!\",\n                text: \"My fun episode!\"\n            })\n        })\n    }\n\n    handleDelete(id) {\n        fetch(\"/\" + id, {\n            method: \"DELETE\"\n        })\n    }\n\n    render() {\n        const chats = this.state.chat?.map(x => (<li>\n                            <p>{x.name}</p>\n                            <h1>{x.title}</h1>\n                            <p>{x.text}</p>\n                            <button onClick={this.handleEdit}>Edit</button>\n                            <button onClick={this.handleDelete}>Delete</button>\n                        </li>));\n        return (<>\n            <div className=\"App\">\n                <h1>Chat App</h1>\n                <form action=\"\" onSubmit={(e) => this.handleSubmit(e)}>\n                    <label htmlFor=\"name\">Name</label>\n                    <input type=\"text\" name=\"name\" id=\"name\"/>\n                    <label htmlFor=\"title\">Title</label>\n                    <input type=\"text\" name=\"title\"/>\n                    <label htmlFor=\"text\">Share your thoughts!</label>\n                    <input type=\"text\" name=\"text\" id=\"text\"/>\n                    <button type=\"submit\">Chat!</button>\n                </form>\n\n                <div className=\"chat-display\">\n                    <ul>\n                        {chats}\n                    </ul>\n                </div>\n            </div>\n        </>);\n    };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}